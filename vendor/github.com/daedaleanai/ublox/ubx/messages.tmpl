package ubx

import (
	"fmt"
	"strings"
)

{{range $k, $v :=  .}}
// Message {{$k}} {{if gt (len $v) 1 }}({{len $v}} versions){{end}}

{{range $v}}
// {{.TypeName}} ({{.Type}}) {{.Description | notabs}}
// Class/Id {{printf "0x%02x 0x%02x" .Class .Id}} ({{.MinSize}}{{if ne .MinSize .MaxFixSize}} or {{.MaxFixSize}}{{end}}{{if .VarSize}} + N*{{.VarSize}}{{end}} bytes)
// {{.Comment | notabs}}
{{- if .IsString}}
type {{.TypeName}} string
{{- else}}
type {{.TypeName}} struct {
{{- range .Blocks}}
	{{- if eq .Cardinality ""}}
		{{block "field" .}}{{.FieldName}} {{.ArraySpec}}
			{{- if .BitfieldRef}}{{.Message.TypeName}}{{.BitfieldRef|title}}
			{{- else if .Bitfield}}{{.Message.TypeName}}{{.Name | title}}
			{{- else}}{{.FieldType}} {{- if .LenFor}} `len:"{{.LenFor|title}}"`{{end}}{{if .IsSubtypeField}} `stf:"{{.Subtype}}"`{{end}}
			{{- end}} // {{if ne .Unit "-"}}[{{if ne .Scale "-"}}{{.Scale}} {{end}}{{.Unit}}] {{end}}{{.Comment |notabs -}}{{end}}
	{{- else if eq .Cardinality "optional"}}
		// Optional
		{{- range .Nested}}
		{{template "field" .}}
		{{- end}}
	{{- else if eq .Cardinality "repeated"}}
		{{- if .IsString}}
		{{.FieldName}} string
		{{- else}}
		{{.FieldName}} []*{{.Message.TypeName}}{{.FieldName}}Type // len: {{.LenField|title}}
		{{- end}}
	{{- end}}
{{- end}}
}
{{- end}}

func ({{.TypeName}}) classID() uint16 { return {{printf "0x%02x%02x" .Id .Class }} }

{{- range .Blocks}}
{{- if eq .Cardinality "repeated"}}
		{{- if .IsString}}
		{{- else}}

type {{.Message.TypeName}}{{.FieldName}}Type struct {
		{{- range .Nested}}
			{{template "field" .}}
		{{- end}}
}
		{{- end}}
	{{- end}}
{{- end}}

{{- range .Blocks}}
	{{- if eq .Cardinality ""}}
		{{- block "enums" .}}
			{{- if .Bitfield}}

type {{.Message.TypeName}}{{.Name | title}} {{.FieldType}}
const (
{{- range .Bitfield}}
{{- if .Name}}
	{{.Block.Message.TypeName}}{{.Name | title}} {{.Block.Message.TypeName}}{{.Block.Name | title}}  = {{.Mask}} // {{.Description | notabs}}
{{- end}}
{{- end}}
)
			{{- end}}
		{{- end}}
	{{- else if eq .Cardinality "optional"}}
		{{- range .Nested}}
		{{- template "enums" .}}
		{{- end}}
	{{- else if eq .Cardinality "repeated"}}
		{{- range .Nested}}
		{{- template "enums" .}}
		{{- end}}
	{{- end}}
{{- end}}

{{- range .Blocks}}
	{{- if eq .Cardinality ""}}
		{{- block "strings" .}}
			{{- if .Bitfield}}

func (v {{.Message.TypeName}}{{.Name | title}}) String() string {
	var b []string
{{- range .Bitfield}}
{{- if .Name}}
	if (v & {{.Mask}} != 0 ) {
		{{- if .OneBit}}
		b = append(b, "{{.Name | title}}")
		{{- else}}
		b = append(b, fmt.Sprintf("{{.Name | title}}<%b>", (v & {{.Mask}})>>{{.Shift}}))
		{{- end}}
	}
	v &^= {{.Mask}}
{{- end}}
{{- end}}
	if v != 0 {
		b = append(b, fmt.Sprintf("%x", uint(v)))
	}
	return strings.Join(b,",")
}
			{{- end}}
		{{- end}}
	{{- else if eq .Cardinality "optional"}}
		{{- range .Nested}}
		{{- template "strings" .}}
		{{- end}}
	{{- else if eq .Cardinality "repeated"}}
		{{- range .Nested}}
		{{- template "strings" .}}
		{{- end}}
	{{- end}}
{{- end}}


{{- end}}
{{- end}}



func mkMsg(classId, sz uint16, frame []byte) Message {
	switch classId {
{{range $k, $v :=  .}}
	case {{with (index $v 0)}}{{printf "0x%02x%02x" .Id .Class }}{{end}}:
       {{- if isambiguous (index $v 0).ClassIDName}}
       		return mk{{(index $v 0).TypeName}}(sz, frame)
       {{- else}}
	       	{{- if eq 1 (len $v)}}
       		return new({{(index $v 0).TypeName}})
    	   	{{- else}}
    
       		switch sz {
	       		{{- range $v}}
	       			{{- if eq .VarSize 0}}
	       	case {{.MinSize}}{{if ne .MinSize .MaxFixSize}}, {{.MaxFixSize}}{{end}}:
           		return new({{.TypeName}})   // {{.MinSize}} {{.MaxFixSize}} [{{.VarSize}}]
    	   			{{- end}}
    	   		{{- end}}
	       		{{- range $v}}
	       			{{- if ne .VarSize 0}}
	       default:
           		return new({{.TypeName}})   // {{.MinSize}}{{if ne .MinSize .MaxFixSize}} .. {{.MaxFixSize}}{{end}}{{if ne 0 .VarSize}} [{{.VarSize}}]{{end}}
    	   			{{- end}}
    	   		{{- end}}
    	   }
 
    	   {{- end}}
       {{- end}}
{{end}}

       }
       return nil
}

/** Please Provide implementations of the following functions to disambiguate

{{range $k, $v :=  .}}
{{- if isambiguous (index $v 0).ClassIDName}}
func mk{{(index $v 0).TypeName}}(sz uint16, frame []byte) Message {
       {{- range $v}}
            return new({{.TypeName}}) // length: {{.MinSize}}{{if ne .MinSize .MaxFixSize}} .. {{.MaxFixSize}}{{end}}{{if ne 0 .VarSize}} [{{.VarSize}}]{{end}}
            {{- range .Blocks}}{{if .IsSubtypeField}} subtype byte: {{.Subtype}}{{end}}{{end}}
       {{- end}}	
}
{{- end}}
{{- end}}

*/

